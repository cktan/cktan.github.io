<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Here There be Data</title>
    <link>http://cktan.us/index.xml</link>
    <description>Recent content on Here There be Data</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Oct 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://cktan.us/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Catalog Corruption in Greenplum DB</title>
      <link>http://cktan.us/post/20151020/gpdb-catalog-corruption/</link>
      <pubDate>Tue, 20 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://cktan.us/post/20151020/gpdb-catalog-corruption/</guid>
      <description>&lt;p&gt;Recently one of our clients experienced catalog corruption in
Greenplum DB after a power outage.&lt;/p&gt;

&lt;p&gt;When the GPDB was restarted, a catalog corruption had manifested, and
even though normal SQL submission still works, &lt;code&gt;pg_dump&lt;/code&gt; was failing
with an error like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pg_dump -t TABNAME DBNAME &amp;gt; /dev/null
pg_dump: schema with OID 12345678 does not exist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, determine what needs to be fixed. Fire up &lt;code&gt;psql&lt;/code&gt; and check:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select oid from pg_type where typnamespace = 12345678;
select oid from pg_class where relnamespace = 12345678;
select oid from pg_operator where oprnamespace = 12345678;
select oid from pg_conversion where connamespace = 12345678;
select oid from pg_opclass where opcnamespace = 12345678;
select oid from pg_aggregate where aggnamespace = 12345678;
select oid from pg_proc where procnamespace = 12345678;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If any of the above queries returned a row, we can attempt to fix the
corruption by deleting the offending entries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WARNING: THE FOLLOWING PROCEDURE SHOULD NOT BE DONE LIGHTLY.
CONTACT YOUR SERVICE REP TO HELP YOU BACKUP DATABASE BEFORE PROCEEDING.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Step 1: Shutdown GPDB
$ gpstop -M immediate

# Step 2: Restart GPDB master in *utility* mode:
$ gpstart -m

# Step 3: Connect to the master in utility mode for catalog maintenance:
$ PGOPTION=&#39;-c gp_session_role=utility&#39; psql DBNAME

-- set the GUC to enable catalog updates. THIS IS NOT OBVIOUS!
set allow_system_table_mods=dml;

-- perform the updates
delete pg_type where typnamespace = 12345678;
delete pg_class where relnamespace = 12345678;
delete pg_operator where oprnamespace = 12345678;
delete pg_conversion where connamespace = 12345678;
delete pg_opclass where opcnamespace = 12345678;
delete pg_aggregate where aggnamespace = 12345678;
delete pg_proc where procnamespace = 12345678;

\quit

# Step 5: Restart GPDB:
$ gpstop -m; gpstart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Good luck!&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comparing Tables in Postgres</title>
      <link>http://cktan.us/post/20150517/postgres-compare-table/</link>
      <pubDate>Sun, 17 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://cktan.us/post/20150517/postgres-compare-table/</guid>
      <description>

&lt;p&gt;How to tell if two tables are exactly the same?&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;method-1-use-sql-except&#34;&gt;Method 1: Use SQL EXCEPT&lt;/h3&gt;

&lt;p&gt;If you google around, you will find
&lt;a href=&#34;http://dba.stackexchange.com/questions/72641/checking-whether-two-tables-have-identical-content-in-postgresql&#34;&gt;this post&lt;/a&gt;,
where the use of &lt;code&gt;EXCEPT&lt;/code&gt; is suggested.  To obtain rows in t1 that are
missing in t2:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from (table t1 except table t2) foo;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To obtain all rows that are different between t1 and t2:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- note: do not drop the parens
select * 
from ((table t1 except table t2) 
	union all (table t2 except table t1)) foo;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that an empty result set from the above query does not indicate
that t1 and t2 are EQUAL. For that, we would also need to assert that
t1 and t2 has the same cardinality, i.e., same number of rows.&lt;/p&gt;

&lt;p&gt;To get the true/false on equality:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select case
    when exists (table t1 except table t2) then &#39;diff&#39;
    when exists (table t2 except table t1) then &#39;diff&#39;
    when (select count(*) from t1) != (select count(*) from t2) then &#39;diff&#39;
    else &#39;same&#39; end;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;method-2-hash-it-ourselves&#34;&gt;Method 2: Hash it ourselves&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;with A as (
    select hashtext(textin(record_out(t1))) as h, count(*) as c
      from t1
      group by 1
),
 B as (
    select hashtext(textin(record_out(t2))) as h, count(*) as c
    from t2
    group by 1
)
select *
 from A full outer join B on (A.h + A.c = B.h + B.c)
 where A.h is null or B.h is null
 limit 5;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The SQL above gives you up to 5 differences between t1 and
t2, and if there are 0 differences, then t1 and t2 are indeed EQUAL.&lt;/p&gt;

&lt;p&gt;To see exactly which row is different, take the h value
(e.g. &lt;code&gt;12345&lt;/code&gt;) of the result and match it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select *
 from t1     -- or t2
 where hashtext(textin(record_out(t1))) = 12345;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;[2015-05-22]&lt;/strong&gt; Here is a clever way devised by Feng Tian
(ftian at vitessedata.com) to tell if t1 equals t2 without any join. It uses
an agg to sum the 1&amp;rsquo;s (coming from t1) and -1&amp;rsquo;s (coming from t2) of
the same hash. Sum of non-zero means that particular record is missing
from one or the other table, and we detect this using the HAVING clause.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select h, sum(cnt) from (
   select textin(record_out(t1)) as h, 1 as cnt from t1
   union all
   select textin(record_out(t2) as h, -1 as cnt from t2) foo
group by h 
having sum(cnt) &amp;lt;&amp;gt; 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;which-method-is-better&#34;&gt;Which method is better?&lt;/h3&gt;

&lt;p&gt;In general, the built-in EXCEPT clause works better. In the worst
case, the SQL implies each table needs to be scanned 2 times for the
case when they are equal. When the tables are different, however, the
query may finish much faster with only a partial scan.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Date Dimension Table in Postgres</title>
      <link>http://cktan.us/post/20150315/postgres-date-dimension/</link>
      <pubDate>Sun, 15 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://cktan.us/post/20150315/postgres-date-dimension/</guid>
      <description>&lt;p&gt;One of the first dimension tables required for any Data Warehouse project is
the Date Dimension table. See &lt;a href=&#34;http://www.kimballgroup.com/data-warehouse-business-intelligence-resources/kimball-techniques/dimensional-modeling-techniques/calendar-date-dimension/&#34;&gt;Calendar Date Dimensions @kimballgroup&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;We want our date dimension table to look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Column             | Type | Description 
------------------ | ---- | ----------- 
date_key           | int  | A number corresponding to the date. e.g. 20150315. 
date               | date | SQL date. 
y                  | int  | Year in number, e.g. 2015. 
m                  | int  | Month in number (1..12). 
d                  | int  | Day of month (1..31). 
q                  | int  | Quarter (1..4). 
h                  | int  | First / second half of year (1 or 2). 
dow                | int  | Day of week (1..7). 
doy                | int  | Day of year (1..366). 
yow                | int  | Year of week.
                   |      |  Can be different from y only during first week of the year. 
woy                | int  | Week of year (1..52).
                   |      | Note: first few days of the year may be week 52 of last year. 
doe                | int  | Day of epoch, a serial number. 
woe                | int  | Week of epoch, a serial number. 
moe                | int  | Month of epoch, a serial number. 
yoe                | int  | Year of epoch, a serial number. 
is_weekday         | bool | True if Mon..Fri. 
is_weekend         | bool | True if Sat..Sun. 
first_date_of_week | date | Date of Monday of this week. 
last_date_of_week  | date | Date of Sunday of this week. 
yw                 | text | e.g. 2015-W5 for week 5 of 2015. 
ym                 | text | e.g. 2015-12 for December 2015. 
yq                 | text | e.g. 2015-Q4 for Q4 of 2015. 
is_holiday         | bool | Holiday indicator.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The SQL statement follows. A few things to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can edit section &lt;code&gt;DR1&lt;/code&gt; to set the starting date and the range of
your date dimension. In the code below, we start generating dates
from year 2000 through 2030.&lt;/li&gt;
&lt;li&gt;A week starts from Monday (1) and ends on Sunday (7).&lt;/li&gt;
&lt;li&gt;The first week of the year usually belongs to the previous year. For
example, on January 1, 2000, the year-of-week is 1999, and the week-of-year is 52.&lt;/li&gt;
&lt;li&gt;You should add columns to this table to mark special dates such as
holidays and significant events of the company.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;
create table datedim as
with
DR1 as (
    -- You can change the range here!
    -- epoch starting 2000-01-03, for 30 years
    -- must start on a Monday and end on a Sunday to avoid partial week
    select n,
       &#39;2000-01-03&#39;::date as first_date,
       &#39;2000-01-03&#39;::date + n as date
       from generate_series(0, &#39;2031-01-05&#39;::date - &#39;2000-01-03&#39;) n
),
DR2 as (
    select *,
        extract(dow from first_date) as day_of_first_date,
        (date - first_date) + 1 as doe,
        extract(year from date)::int - 2000 + 1 as yoe,
        extract(week from date)::int as woy,
        extract(day from date)::int as dom,
        extract(dow from date)::int as dow,
        extract(doy from date)::int as doy, 
        extract(month from date)::int as m,
        extract(quarter from date)::int as q, 
        extract(year from date)::int as y
    from DR1
),
DR3 as (
    select *,
         (case when m = 1 and woy &amp;gt; 50 then y - 1 else y end) as yow,
         (8 - (case when day_of_first_date = 0
                    then 7 else day_of_first_date end))::int % 7 as dayoffset
    from DR2
),
DR4 as (
    select *,
        ((m - 1) / 6) + 1 as h,     -- half of year
        (doe - 1 - dayoffset + 7) / 7 + 1 as woe,
        (yoe - 1) * 12 + m as moe,
        (yoe - 1) * 4 + ((m - 1) / 3) + 1 as qoe,
        (1 &amp;lt;= dow and dow &amp;lt;= 5) as is_weekday,
        not (1 &amp;lt;= dow and dow &amp;lt;= 5) as is_weekend

    from DR3
),
MonthGroup as (
    select moe, max(date) as last_date_of_month from DR4 group by 1
),
WeekGroup as (
    select woe, min(date) as first_date_of_week,
           max(date) as last_date_of_week from DR4 group by 1
)
select
    to_char(date, &#39;YYYYMMDD&#39;)::int as date_key,
    date,
    y,                          -- year (YYYY)
    m,                          -- month (1..12)
    dom as d,                   -- day of month (1..31)
    q,                          -- quarter (1..4)
    h,              -- half (1..2)
    dow,                        -- day of week (1..7)
    doy,                        -- day of year (1..366)
    yow,                        -- year of week
    woy,                        -- week of year
    doe,                        -- day of epoch 
    DR4.woe,                    -- week of epoch
    DR4.moe,                    -- month of epoch
    yoe,                        -- year of epoch
    is_weekday,                 -- true if Mon .. Fri
    is_weekend,                 -- true if Sat or Sun 
    first_date_of_week,         -- date of Mon in week
    last_date_of_week,          -- date of Sun in week
    last_date_of_month,         -- date of last day in month
    yow||&#39;-W&#39;||LPAD(woy::text, &#39;0&#39;, 2) as yw,       -- e.g.2015-W05
    to_char(date, &#39;yyyy-mm&#39;) as ym, -- e.g. 2015-07
    y||&#39;-Q&#39;||q as yq,               -- e.g. 2015-Q3
    0::bool as is_holiday
from DR4
join MonthGroup using (moe)
join WeekGroup using (woe)
;

-- Insert the *special date row* indicating invalid date
-- All columns are NULL except the date_key field. 

insert into datedim (date_key) values (99999999);

-- Populate holidays manually.

-- Populate other special dates manually.

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>